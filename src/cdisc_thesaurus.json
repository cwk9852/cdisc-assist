{
    "code_indicators": [
      "create",
      "generate",
      "write",
      "code",
      "query",
      "sql",
      "dbt",
      "transform",
      "model",
      "script",
      "implementation",
      "mapping",
      "derivation"
    ],
    "explanation_indicators": [
      "explain",
      "what",
      "why",
      "how",
      "describe",
      "help me understand",
      "tell me about",
      "difference between",
      "compare",
      "analysis"
    ],
    "system_instruction": "You are a specialized CDISC standards expert for oncology clinical trials with deep knowledge of BOTH SDTM and ADaM implementations. Your expertise is HIGHLY TECHNICAL and focused on DATA TRANSFORMATIONS, especially in SQL and dbt models for BigQuery. \n\nCore Expertise:\n- CDISC standards implementation (SDTM and ADaM) with precise attention to controlled terminology\n- Converting source data into SDTM/ADaM models with optimized SQL transformations\n- Implementing complex derivations like RECIST criteria and BOR calculations\n- Creating efficient, well-structured dbt models that follow best practices\n- Designing data pipelines for clinical data standardization\n\nYou specialize in these domains and their technical implementations:\n- DM/ADSL: Demographics and baseline characteristics with subject-level analysis\n- AE/ADAE: Adverse event analysis with SMQs and toxicity grading\n- LB/ADLB: Lab test normalization, grading, and shift analyses\n- EX/ADEX: Exposure calculations including dose intensity and interruptions\n- TU/ADTU: Tumor measurements with complex target/non-target lesion handling\n- RS/ADRS: Response assessments using RECIST 1.1 criteria\n- ADTTE: Time-to-event analysis with censoring rules\n- ADTR: Tumor response analysis with BOR and confirmation logic\n\nResponse Guidelines:\n1. ALWAYS START with a clear explanation of domain purpose and structure before showing any code\n2. When asked about a CDISC domain, FIRST explain what the domain represents and its key variables\n3. For code requests: Start with explanation of approach, THEN generate complete, production-quality SQL\n4. For explanations: Focus on technical implementation details, variable relationships, and CDISC standards\n5. Include important derivation logic and handle edge cases in your explanations and code\n6. When mapping data, explain the relationships between source and target variables\n7. Use clear, readable SQL with proper formatting (no excessive backslashes)\n8. Structure your responses with headings and bullet points for clarity\n9. If a topic is outside your expertise, respond only with: 'I can only assist with CDISC standards implementation for clinical trials.'\n\nALWAYS start with domain knowledge and explanation before presenting code. Focus on being educational rather than just providing SQL.",
    "code_example": "-- Example dbt model for ADRS (ADaM Response) dataset from SDTM TU and RS\n{{\\n  config(\n    materialized = 'table',\n    schema = 'adam',\n    tags = ['oncology', 'response']\n  )\n}}\n\nWITH source_tu AS (\n    -- Source Target Lesion measurements\n    SELECT\n        STUDYID,\n        USUBJID,\n        VISIT,\n        VISITNUM,\n        TUDTC,\n        TULNKID,\n        TUTESTCD,\n        TUTEST,\n        TUORRES,\n        TUSTRESC,\n        TUMETHOD,\n        TULOC,\n        TUEVAL,\n        TUEVALID\n    FROM {{ source('sdtm', 'tu') }}\n    WHERE TUTESTCD IN ('DIAMETER', 'SUMDIAM') -- Include only target lesion measurements\n      AND TUEVAL = 'INVESTIGATOR'             -- Use investigator assessments\n),\n\nsource_rs AS (\n    -- Source Response data\n    SELECT\n        STUDYID,\n        USUBJID,\n        VISIT,\n        VISITNUM,\n        RSDTC,\n        RSTESTCD,\n        RSTEST,\n        RSCAT,\n        RSEVAL,\n        RSEVALID,\n        RSSTRESC,\n        RSNDTC\n    FROM {{ source('sdtm', 'rs') }}\n    WHERE RSCAT = 'OVERALL RESPONSE'          -- Focus on overall response assessments\n      AND RSEVAL = 'INVESTIGATOR'             -- Use investigator assessments\n),\n\n-- Join with ADSL for standard subject-level variables\nadsl AS (\n    SELECT\n        STUDYID,\n        USUBJID,\n        SUBJID,\n        SITEID,\n        TRTSDT,\n        TRTEDT,\n        SAFFL,\n        TRT01A,\n        TRT01P,\n        ITTFL,\n        AGE,\n        SEX,\n        RACE\n    FROM {{ ref('adsl') }}\n    WHERE ITTFL = 'Y'                         -- Include only ITT population\n),\n\n-- Calculate baseline sum of diameters\nbaseline_sod AS (\n    SELECT\n        USUBJID,\n        SUM(CAST(TUSTRESC AS FLOAT64)) AS BASELSUM\n    FROM source_tu\n    WHERE TUTESTCD = 'DIAMETER'\n      AND VISIT = 'SCREENING'                 -- Define baseline as screening visit\n    GROUP BY USUBJID\n),\n\n-- Target lesion response evaluations by visit\ntarget_response AS (\n    SELECT\n        tu.USUBJID,\n        tu.VISIT,\n        tu.VISITNUM,\n        tu.TUDTC,\n        SUM(CAST(tu.TUSTRESC AS FLOAT64)) AS SUMDIAM,\n        bs.BASELSUM,\n        -- Calculate percent change from baseline\n        CASE \n            WHEN bs.BASELSUM > 0 THEN \n                ROUND(100 * (SUM(CAST(tu.TUSTRESC AS FLOAT64)) - bs.BASELSUM) / bs.BASELSUM, 1)\n            ELSE NULL\n        END AS PCHG,\n        -- Derive target response per RECIST 1.1\n        CASE\n            WHEN SUM(CAST(tu.TUSTRESC AS FLOAT64)) = 0 THEN 'CR'\n            WHEN ROUND(100 * (SUM(CAST(tu.TUSTRESC AS FLOAT64)) - bs.BASELSUM) / bs.BASELSUM, 1) <= -30 THEN 'PR'\n            WHEN ROUND(100 * (SUM(CAST(tu.TUSTRESC AS FLOAT64)) - bs.BASELSUM) / bs.BASELSUM, 1) >= 20 THEN 'PD'\n            ELSE 'SD'\n        END AS TRSP\n    FROM source_tu tu\n    LEFT JOIN baseline_sod bs ON tu.USUBJID = bs.USUBJID\n    WHERE tu.TUTESTCD = 'DIAMETER'\n    GROUP BY tu.USUBJID, tu.VISIT, tu.VISITNUM, tu.TUDTC, bs.BASELSUM\n),\n\n-- Combine target and non-target response with overall response\noverall_response AS (\n    SELECT\n        tr.USUBJID,\n        tr.VISIT,\n        tr.VISITNUM,\n        tr.TUDTC AS ADT,\n        tr.SUMDIAM,\n        tr.BASELSUM,\n        tr.PCHG,\n        tr.TRSP AS TRLRES,\n        rs.RSSTRESC AS OVRLRES,\n        -- Derive ADY (analysis day)\n        DATE_DIFF(CAST(tr.TUDTC AS DATE), CAST(adsl.TRTSDT AS DATE), DAY) + 1 AS ADY,\n        -- Analysis visit derived from visit number\n        CASE\n            WHEN tr.VISITNUM = 1 THEN 'BASELINE'\n            WHEN tr.VISITNUM BETWEEN 2 AND 3 THEN 'CYCLE 1'\n            WHEN tr.VISITNUM BETWEEN 4 AND 5 THEN 'CYCLE 2'\n            WHEN tr.VISITNUM BETWEEN 6 AND 7 THEN 'CYCLE 3'\n            ELSE 'CYCLE ' || CAST(CEIL(tr.VISITNUM / 2) AS STRING)\n        END AS AVISIT,\n        DENSE_RANK() OVER (PARTITION BY tr.USUBJID ORDER BY tr.VISITNUM) AS AVISITN\n    FROM target_response tr\n    LEFT JOIN source_rs rs ON tr.USUBJID = rs.USUBJID AND tr.VISIT = rs.VISIT\n    LEFT JOIN adsl ON tr.USUBJID = adsl.USUBJID\n),\n\n-- Best Overall Response determination\nbor_candidates AS (\n    SELECT\n        USUBJID,\n        OVRLRES,\n        -- Apply confirmation rule - response must be maintained for â‰¥4 weeks\n        CASE\n            WHEN OVRLRES IN ('CR', 'PR') AND \n                 LEAD(OVRLRES, 1) OVER (PARTITION BY USUBJID ORDER BY VISITNUM) IN ('CR', 'PR') AND\n                 DATE_DIFF(CAST(LEAD(ADT, 1) OVER (PARTITION BY USUBJID ORDER BY VISITNUM) AS DATE),\n                           CAST(ADT AS DATE), DAY) >= 28\n            THEN OVRLRES\n            WHEN OVRLRES = 'SD' AND ADY >= 42  -- SD requires minimum 6 weeks duration\n            THEN 'SD'\n            WHEN OVRLRES = 'PD'\n            THEN 'PD'\n            ELSE NULL\n        END AS CONF_RESP\n    FROM overall_response\n),\n\nbest_response AS (\n    SELECT\n        USUBJID,\n        -- Apply response hierarchy (CR > PR > SD > PD > NE)\n        CASE\n            WHEN COUNT(CASE WHEN CONF_RESP = 'CR' THEN 1 END) > 0 THEN 'CR'\n            WHEN COUNT(CASE WHEN CONF_RESP = 'PR' THEN 1 END) > 0 THEN 'PR'\n            WHEN COUNT(CASE WHEN CONF_RESP = 'SD' THEN 1 END) > 0 THEN 'SD'\n            WHEN COUNT(CASE WHEN CONF_RESP = 'PD' THEN 1 END) > 0 THEN 'PD'\n            ELSE 'NE'\n        END AS BOR\n    FROM bor_candidates\n    GROUP BY USUBJID\n)\n\n-- Final ADRS dataset\nSELECT\n    -- ADSL variables (subject-level)\n    adsl.STUDYID,\n    adsl.USUBJID,\n    adsl.SUBJID,\n    adsl.SITEID,\n    adsl.AGE,\n    adsl.SEX,\n    adsl.RACE,\n    adsl.TRTSDT,\n    adsl.TRTEDT,\n    adsl.TRT01A,\n    adsl.TRT01P,\n    \n    -- Response assessment data\n    or1.ADT,\n    or1.ADY,\n    or1.AVISIT,\n    or1.AVISITN,\n    \n    -- Analysis parameters in vertical structure\n    paramcd.PARAMCD,\n    paramcd.PARAM,\n    \n    -- Analysis values\n    CASE \n        WHEN paramcd.PARAMCD = 'OVRLRESP' THEN or1.OVRLRES\n        WHEN paramcd.PARAMCD = 'TRLRESP' THEN or1.TRLRES\n        WHEN paramcd.PARAMCD = 'BOR' THEN br.BOR\n        WHEN paramcd.PARAMCD = 'SUMDIAM' THEN CAST(or1.SUMDIAM AS STRING)\n        WHEN paramcd.PARAMCD = 'PCHGBSL' THEN CAST(or1.PCHG AS STRING)\n        ELSE NULL\n    END AS AVALC,\n    \n    -- Numeric analysis value when applicable\n    CASE \n        WHEN paramcd.PARAMCD = 'SUMDIAM' THEN or1.SUMDIAM\n        WHEN paramcd.PARAMCD = 'PCHGBSL' THEN or1.PCHG\n        ELSE NULL\n    END AS AVAL,\n    \n    -- Analysis value unit\n    CASE \n        WHEN paramcd.PARAMCD = 'SUMDIAM' THEN 'mm'\n        WHEN paramcd.PARAMCD = 'PCHGBSL' THEN '%'\n        ELSE ''\n    END AS AVALU,\n    \n    -- Baseline values\n    CASE \n        WHEN paramcd.PARAMCD = 'SUMDIAM' THEN or1.BASELSUM\n        ELSE NULL\n    END AS BASE\n    \nFROM adsl\nCROSS JOIN (\n    -- Parameters for vertical structure\n    SELECT 'OVRLRESP' AS PARAMCD, 'Overall Response' AS PARAM UNION ALL\n    SELECT 'TRLRESP' AS PARAMCD, 'Target Lesion Response' AS PARAM UNION ALL\n    SELECT 'BOR' AS PARAMCD, 'Best Overall Response' AS PARAM UNION ALL\n    SELECT 'SUMDIAM' AS PARAMCD, 'Sum of Diameters' AS PARAM UNION ALL\n    SELECT 'PCHGBSL' AS PARAMCD, 'Percent Change from Baseline' AS PARAM\n) paramcd\nLEFT JOIN overall_response or1 ON adsl.USUBJID = or1.USUBJID\nLEFT JOIN best_response br ON adsl.USUBJID = br.USUBJID\n\n-- Only include records that have actual values\nWHERE\n    (paramcd.PARAMCD IN ('OVRLRESP', 'TRLRESP', 'SUMDIAM', 'PCHGBSL') AND or1.USUBJID IS NOT NULL)\n    OR (paramcd.PARAMCD = 'BOR' AND br.USUBJID IS NOT NULL)\n\nORDER BY\n    USUBJID,\n    PARAMCD,\n    AVISITN",
    "explanation_prompt_template": "{query}\n\nProvide a comprehensive explanation starting with domain basics before showing any code. Include:\n\n1.  DOMAIN OVERVIEW: Purpose, structure, and role in clinical trials\n2.  KEY VARIABLES: Required and conditional variables with descriptions\n3.  IMPLEMENTATION DETAILS: How to map from source data to CDISC standards\n4.  VARIABLE RELATIONSHIPS: Dependencies and connections between variables\n5.  COMMON CHALLENGES: Typical issues and recommended solutions\n\nEnsure your explanation is structured with clear headings and follows CDISC standards. Reference source structure: {relevant_view} where applicable.\n\nIf code examples would be helpful, include them AFTER the explanation, with comments explaining each section.",
    "code_prompt_template": "{query}\n\nFirst, provide a brief explanation of the domain and what you're going to implement, then create a production-ready dbt model in SQL that follows these guidelines:\n\n1.  START WITH AN OVERVIEW of what this SQL will achieve in CDISC terms\n2.  Implement a complete CDISC-compliant transformation\n3.  Include ALL required variables with correct attributes\n4.  Handle edge cases and NULL values properly\n5.  Use efficient, optimized SQL patterns\n6.  Follow proper variable naming and labels per CDISC standards\n\nSource view: {relevant_view}\nAvailable variables: {relevant_vars}\n\nCODE QUALITY REQUIREMENTS:\n1.  Include detailed comments explaining the purpose of each CTE and complex transformations\n2.  Use consistent formatting with proper indentation and spacing\n3.  Organize code logically using CTEs for distinct processing steps\n4.  Use variable names rather than column numbers for references\n5.  Follow CDISC standards for variable naming and attributes\n6.  Include proper data type handling and cleaning\n7.  Avoid excessive backslashes or escape characters"
  }