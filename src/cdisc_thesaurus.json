{
    "code_indicators": [
        "create",
        "generate",
        "write",
        "code",
        "query",
        "sql",
        "dbt",
        "transform",
        "model",
        "script",
        "implementation",
        "mapping",
        "derivation"
    ],
    "explanation_indicators": [
        "explain",
        "what",
        "why",
        "how",
        "describe",
        "help me understand",
        "tell me about",
        "difference between",
        "compare",
        "analysis"
    ],
    "system_instruction": "You are a specialized CDISC standards expert for oncology clinical trials with deep knowledge of BOTH SDTM and ADaM implementations. Your expertise is HIGHLY TECHNICAL and focused on DATA TRANSFORMATIONS, especially in SQL and dbt models for BigQuery. Core Expertise: CDISC standards implementation (SDTM and ADaM) with precise attention to controlled terminology; Converting source data into SDTM/ADaM models with optimized SQL transformations; Implementing complex derivations like RECIST criteria and BOR calculations; Creating efficient, well-structured dbt models that follow best practices; Designing data pipelines for clinical data standardization. You specialize in these domains and their technical implementations: DM/ADSL (Demographics and baseline characteristics); AE/ADAE (Adverse event analysis with SMQs); LB/ADLB (Lab test normalization and grading); EX/ADEX (Exposure calculations including dose intensity); TU/ADTU (Tumor measurements with complex lesion handling); RS/ADRS (Response assessments using RECIST 1.1); ADTTE (Time-to-event analysis with censoring rules); ADTR (Tumor response with BOR and confirmation logic). Response Guidelines: Provide TECHNICALLY PRECISE, SPECIFIC answers with CDISC compliant terminology. For code requests: Generate COMPLETE, PRODUCTION-QUALITY SQL that includes ALL required fields. For explanations: Focus on technical implementation details and variable relationships. Include important derivation logic and handle edge cases in your code. When mapping data, ensure all required SDTM/ADaM variables are included with correct attributes. If a topic is outside your expertise, respond only with: 'I can only assist with CDISC standards implementation for clinical trials.' PRIORITIZE CODE QUALITY AND TECHNICAL ACCURACY above all else.",
    "code_example": "-- Example dbt model for ADRS (ADaM Response) dataset from SDTM TU and RS\\n\\{\\{ config(\\n    materialized = 'table',\\n    schema = 'adam',\\n    tags = ['oncology', 'response']\\n) \\}\\}\\n\\nWITH source_tu AS (\\n    -- Source Target Lesion measurements\\n    SELECT\\n        STUDYID,\\n        USUBJID,\\n        VISIT,\\n        VISITNUM,\\n        TUDTC,\\n        TULNKID,\\n        TUTESTCD,\\n        TUTEST,\\n        TUORRES,\\n        TUSTRESC,\\n        TUMETHOD,\\n        TULOC,\\n        TUEVAL,\\n        TUEVALID\\n    FROM \\{\\{ source('sdtm', 'tu') \\}\\}\\n    WHERE TUTESTCD IN ('DIAMETER', 'SUMDIAM') -- Include only target lesion measurements\\n      AND TUEVAL = 'INVESTIGATOR'             -- Use investigator assessments\\n),\\n\\nsource_rs AS (\\n    -- Source Response data\\n    SELECT\\n        STUDYID,\\n        USUBJID,\\n        VISIT,\\n        VISITNUM,\\n        RSDTC,\\n        RSTESTCD,\\n        RSTEST,\\n        RSCAT,\\n        RSEVAL,\\n        RSEVALID,\\n        RSSTRESC,\\n        RSNDTC\\n    FROM \\{\\{ source('sdtm', 'rs') \\}\\}\\n    WHERE RSCAT = 'OVERALL RESPONSE'          -- Focus on overall response assessments\\n      AND RSEVAL = 'INVESTIGATOR'             -- Use investigator assessments\\n),\\n\\n-- Join with ADSL for standard subject-level variables\\nadsl AS (\\n    SELECT\\n        STUDYID,\\n        USUBJID,\\n        SUBJID,\\n        SITEID,\\n        TRTSDT,\\n        TRTEDT,\\n        SAFFL,\\n        TRT01A,\\n        TRT01P,\\n        ITTFL,\\n        AGE,\\n        SEX,\\n        RACE\\n    FROM \\{\\{ ref('adsl') \\}\\}\\n    WHERE ITTFL = 'Y'                         -- Include only ITT population\\n),\\n\\n-- Calculate baseline sum of diameters\\nbaseline_sod AS (\\n    SELECT\\n        USUBJID,\\n        SUM(CAST(TUSTRESC AS FLOAT64)) AS BASELSUM\\n    FROM source_tu\\n    WHERE TUTESTCD = 'DIAMETER'\\n      AND VISIT = 'SCREENING'                 -- Define baseline as screening visit\\n    GROUP BY USUBJID\\n),\\n\\n-- Target lesion response evaluations by visit\\ntarget_response AS (\\n    SELECT\\n        tu.USUBJID,\\n        tu.VISIT,\\n        tu.VISITNUM,\\n        tu.TUDTC,\\n        SUM(CAST(tu.TUSTRESC AS FLOAT64)) AS SUMDIAM,\\n        bs.BASELSUM,\\n        -- Calculate percent change from baseline\\n        CASE \\n            WHEN bs.BASELSUM > 0 THEN \\n                ROUND(100 * (SUM(CAST(tu.TUSTRESC AS FLOAT64)) - bs.BASELSUM) / bs.BASELSUM, 1)\\n            ELSE NULL\\n        END AS PCHG,\\n        -- Derive target response per RECIST 1.1\\n        CASE\\n            WHEN SUM(CAST(tu.TUSTRESC AS FLOAT64)) = 0 THEN 'CR'\\n            WHEN ROUND(100 * (SUM(CAST(tu.TUSTRESC AS FLOAT64)) - bs.BASELSUM) / bs.BASELSUM, 1) <= -30 THEN 'PR'\\n            WHEN ROUND(100 * (SUM(CAST(tu.TUSTRESC AS FLOAT64)) - bs.BASELSUM) / bs.BASELSUM, 1) >= 20 THEN 'PD'\\n            ELSE 'SD'\\n        END AS TRSP\\n    FROM source_tu tu\\n    LEFT JOIN baseline_sod bs ON tu.USUBJID = bs.USUBJID\\n    WHERE tu.TUTESTCD = 'DIAMETER'\\n    GROUP BY tu.USUBJID, tu.VISIT, tu.VISITNUM, tu.TUDTC, bs.BASELSUM\\n),\\n\\n-- Combine target and non-target response with overall response\\noverall_response AS (\\n    SELECT\\n        tr.USUBJID,\\n        tr.VISIT,\\n        tr.VISITNUM,\\n        tr.TUDTC AS ADT,\\n        tr.SUMDIAM,\\n        tr.BASELSUM,\\n        tr.PCHG,\\n        tr.TRSP AS TRLRES,\\n        rs.RSSTRESC AS OVRLRES,\\n        -- Derive ADY (analysis day)\\n        DATE_DIFF(CAST(tr.TUDTC AS DATE), CAST(adsl.TRTSDT AS DATE), DAY) + 1 AS ADY,\\n        -- Analysis visit derived from visit number\\n        CASE\\n            WHEN tr.VISITNUM = 1 THEN 'BASELINE'\\n            WHEN tr.VISITNUM BETWEEN 2 AND 3 THEN 'CYCLE 1'\\n            WHEN tr.VISITNUM BETWEEN 4 AND 5 THEN 'CYCLE 2'\\n            WHEN tr.VISITNUM BETWEEN 6 AND 7 THEN 'CYCLE 3'\\n            ELSE 'CYCLE ' || CAST(CEIL(tr.VISITNUM / 2) AS STRING)\\n        END AS AVISIT,\\n        DENSE_RANK() OVER (PARTITION BY tr.USUBJID ORDER BY tr.VISITNUM) AS AVISITN\\n    FROM target_response tr\\n    LEFT JOIN source_rs rs ON tr.USUBJID = rs.USUBJID AND tr.VISIT = rs.VISIT\\n    LEFT JOIN adsl ON tr.USUBJID = adsl.USUBJID\\n),\\n\\n-- Best Overall Response determination\\nbor_candidates AS (\\n    SELECT\\n        USUBJID,\\n        OVRLRES,\\n        -- Apply confirmation rule - response must be maintained for â‰¥4 weeks\\n        CASE\\n            WHEN OVRLRES IN ('CR', 'PR') AND \\n                 LEAD(OVRLRES, 1) OVER (PARTITION BY USUBJID ORDER BY VISITNUM) IN ('CR', 'PR') AND\\n                 DATE_DIFF(CAST(LEAD(ADT, 1) OVER (PARTITION BY USUBJID ORDER BY VISITNUM) AS DATE),\\n                           CAST(ADT AS DATE), DAY) >= 28\\n            THEN OVRLRES\\n            WHEN OVRLRES = 'SD' AND ADY >= 42  -- SD requires minimum 6 weeks duration\\n            THEN 'SD'\\n            WHEN OVRLRES = 'PD'\\n            THEN 'PD'\\n            ELSE NULL\\n        END AS CONF_RESP\\n    FROM overall_response\\n),\\n\\nbest_response AS (\\n    SELECT\\n        USUBJID,\\n        -- Apply response hierarchy (CR > PR > SD > PD > NE)\\n        CASE\\n            WHEN COUNT(CASE WHEN CONF_RESP = 'CR' THEN 1 END) > 0 THEN 'CR'\\n            WHEN COUNT(CASE WHEN CONF_RESP = 'PR' THEN 1 END) > 0 THEN 'PR'\\n            WHEN COUNT(CASE WHEN CONF_RESP = 'SD' THEN 1 END) > 0 THEN 'SD'\\n            WHEN COUNT(CASE WHEN CONF_RESP = 'PD' THEN 1 END) > 0 THEN 'PD'\\n            ELSE 'NE'\\n        END AS BOR\\n    FROM bor_candidates\\n    GROUP BY USUBJID\\n)\\n\\n-- Final ADRS dataset\\nSELECT\\n    -- ADSL variables (subject-level)\\n    adsl.STUDYID,\\n    adsl.USUBJID,\\n    adsl.SUBJID,\\n    adsl.SITEID,\\n    adsl.AGE,\\n    adsl.SEX,\\n    adsl.RACE,\\n    adsl.TRTSDT,\\n    adsl.TRTEDT,\\n    adsl.TRT01A,\\n    adsl.TRT01P,\\n    \\n    -- Response assessment data\\n    or1.ADT,\\n    or1.ADY,\\n    or1.AVISIT,\\n    or1.AVISITN,\\n    \\n    -- Analysis parameters in vertical structure\\n    paramcd.PARAMCD,\\n    paramcd.PARAM,\\n    \\n    -- Analysis values\\n    CASE \\n        WHEN paramcd.PARAMCD = 'OVRLRESP' THEN or1.OVRLRES\\n        WHEN paramcd.PARAMCD = 'TRLRESP' THEN or1.TRLRES\\n        WHEN paramcd.PARAMCD = 'BOR' THEN br.BOR\\n        WHEN paramcd.PARAMCD = 'SUMDIAM' THEN CAST(or1.SUMDIAM AS STRING)\\n        WHEN paramcd.PARAMCD = 'PCHGBSL' THEN CAST(or1.PCHG AS STRING)\\n        ELSE NULL\\n    END AS AVALC,\\n    \\n    -- Numeric analysis value when applicable\\n    CASE \\n        WHEN paramcd.PARAMCD = 'SUMDIAM' THEN or1.SUMDIAM\\n        WHEN paramcd.PARAMCD = 'PCHGBSL' THEN or1.PCHG\\n        ELSE NULL\\n    END AS AVAL,\\n    \\n    -- Analysis value unit\\n    CASE \\n        WHEN paramcd.PARAMCD = 'SUMDIAM' THEN 'mm'\\n        WHEN paramcd.PARAMCD = 'PCHGBSL' THEN '%'\\n        ELSE ''\\n    END AS AVALU,\\n    \\n    -- Baseline values\\n    CASE \\n        WHEN paramcd.PARAMCD = 'SUMDIAM' THEN or1.BASELSUM\\n        ELSE NULL\\n    END AS BASE\\n    \\nFROM adsl\\nCROSS JOIN (\\n    -- Parameters for vertical structure\\n    SELECT 'OVRLRESP' AS PARAMCD, 'Overall Response' AS PARAM UNION ALL\\n    SELECT 'TRLRESP' AS PARAMCD, 'Target Lesion Response' AS PARAM UNION ALL\\n    SELECT 'BOR' AS PARAMCD, 'Best Overall Response' AS PARAM UNION ALL\\n    SELECT 'SUMDIAM' AS PARAMCD, 'Sum of Diameters' AS PARAM UNION ALL\\n    SELECT 'PCHGBSL' AS PARAMCD, 'Percent Change from Baseline' AS PARAM\\n) paramcd\\nLEFT JOIN overall_response or1 ON adsl.USUBJID = or1.USUBJID\\nLEFT JOIN best_response br ON adsl.USUBJID = br.USUBJID\\n\\n-- Only include records that have actual values\\nWHERE\\n    (paramcd.PARAMCD IN ('OVRLRESP', 'TRLRESP', 'SUMDIAM', 'PCHGBSL') AND or1.USUBJID IS NOT NULL)\\n    OR (paramcd.PARAMCD = 'BOR' AND br.USUBJID IS NOT NULL)\\n\\nORDER BY\\n    USUBJID,\\n    PARAMCD,\\n    AVISITN",
    "explanation_prompt_template": "{query} Provide a technical, precise explanation that includes: CDISC implementation details specific to this domain; Variable relationships and dependencies; Required vs conditional fields; Common implementation challenges and solutions. Source structure to reference: {relevant_view}. Your response should be technically accurate and follow CDISC standards.",
    "code_prompt_template": "{query} Create a production-ready dbt model in SQL that: 1. Implements a complete CDISC-compliant transformation 2. Includes ALL required variables with correct attributes 3. Handles edge cases and NULL values properly 4. Uses efficient, optimized SQL patterns 5. Includes proper variable naming and labels per CDISC standards. Source view: {relevant_view}. Available variables: {relevant_vars}. Generate ONLY the SQL code with no explanations.\n\nIMPORTANT GUIDELINES FOR CODE QUALITY:\n1. INCLUDE DETAILED COMMENTS explaining the purpose of the overall model, each CTE, and complex transformations\n2. Use CONSISTENT FORMATTING with proper indentation and spacing\n3. ORGANIZE CODE LOGICALLY using CTEs for distinct processing steps\n4. USE VARIABLE LABELS rather than column numbers for reference\n5. FOLLOW CDISC STANDARDS for variable naming and attributes\n6. Include proper data type handling and cleaning"
  }